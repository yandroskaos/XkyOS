/******************************************************************************/
/**
* @file		SVGA.cpp
* @brief	XkyOS Graphic Screen Library
* Implementation of SVGA operations and types
* 
* @date		06/03/2008
* @author	Pablo Bravo
*/
/******************************************************************************/

#include "Types.h"
#include "Graphics.h"
#include "SVGA.h"

//==================================DATA======================================//
#pragma data_seg(".data")
//============================================================================//
/**
* @brief Character fonts 8x8.
*/
ALIGN(4)
PRIVATE byte svga_font[8*256] = {
		//0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x81, 0x7E, 0x00,
		0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xFF, 0x7E, 0x00,
		0x36, 0x7F, 0x7F, 0x7F, 0x3E, 0x1C, 0x08, 0x00,
		0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00,
		0x1C, 0x1C, 0x08, 0x6B, 0x7F, 0x6B, 0x08, 0x1C,
		0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x08, 0x1C, 0x3E,
		0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
		0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,
		0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
		0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,
		0x0F, 0x07, 0x0D, 0x3C, 0x66, 0x66, 0x66, 0x3C,
		0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,
		0x30, 0x38, 0x3C, 0x36, 0x34, 0x70, 0xF0, 0xE0,
		0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0,
		0x18, 0xDB, 0x7E, 0x66, 0x66, 0x7E, 0xDB, 0x18,
		0x40, 0x70, 0x7C, 0x7F, 0x7C, 0x70, 0x40, 0x00,
		0x01, 0x07, 0x1F, 0x7F, 0x1F, 0x07, 0x01, 0x00,
		0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
		0x3F, 0x7A, 0x7A, 0x3A, 0x0A, 0x0A, 0x0A, 0x00,
		0x1E, 0x33, 0x1C, 0x36, 0x36, 0x1C, 0x66, 0x3C,
		0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00,
		0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0x7E,
		0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00,
		0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
		0x00, 0x0C, 0x0E, 0x7F, 0x0E, 0x0C, 0x00, 0x00,
		0x00, 0x18, 0x38, 0x7F, 0x38, 0x18, 0x00, 0x00,
		0x00, 0x00, 0x60, 0x60, 0x60, 0x7F, 0x00, 0x00,
		0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
		0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00,
		0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00,
		0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
		0x10, 0x7C, 0xD0, 0x7C, 0x16, 0x7C, 0x10, 0x00,
		0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
		0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,
		0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00,
		0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00,
		0x00, 0x6C, 0x38, 0xFE, 0x38, 0x6C, 0x00, 0x00,
		0x00, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
		0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
		0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80,
/*n0*/	0x3C, 0x66, 0x76, 0x7E, 0x6E, 0x66, 0x3C, 0x00,
/*n1*/	0x0C, 0x1C, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00,
/*n2*/	0x3C, 0x66, 0x06, 0x1C, 0x30, 0x60, 0x7E, 0x00,
/*n3*/	0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00,
/*n4*/	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x00,
/*n5*/	0x7E, 0x60, 0x60, 0x7C, 0x06, 0x66, 0x3C, 0x00,
/*n6*/	0x3C, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00,
/*n7*/	0x7E, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x00,
/*n8*/	0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00,
/*n9*/	0x3C, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x3C, 0x00,
		0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
		0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30,
		0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00,
		0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00,
		0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00,
		0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00,
		0x3C, 0x66, 0x76, 0x76, 0x36, 0x06, 0x3C, 0x00,
/*lA*/	0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00,
/*lB*/	0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00,
/*lC*/	0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00,
/*lD*/	0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00,
/*lE*/	0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00,
/*lF*/	0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00,
/*lG*/	0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00,
/*lH*/	0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00,
/*lI*/	0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00,
/*lJ*/	0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00,
/*lK*/	0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00,
/*lL*/	0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00,
/*lM*/	0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0x00,
/*lN*/	0x66, 0x76, 0x7E, 0x6E, 0x66, 0x66, 0x66, 0x00,
/*lO*/	0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00,
/*lP*/	0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00,
/*lQ*/	0x3C, 0x66, 0x66, 0x66, 0x66, 0x6E, 0x3C, 0x06,
/*lR*/	0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x00,
/*lS*/	0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00,
/*lT*/	0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
/*lU*/	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00,
/*lV*/	0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00,
/*lW*/	0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
/*lX*/	0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00,
/*lY*/	0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00,
/*lZ*/	0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00,
		0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00,
		0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0,
		0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00,
		0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
		0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
/*la*/	0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
/*lb*/	0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00,
/*lc*/	0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x00,
/*ld*/	0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3E, 0x00,
/*le*/	0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3E, 0x00,
/*lf*/	0x1C, 0x36, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x00,
/*lg*/	0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C,
/*lh*/	0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00,
/*li*/	0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
/*lj*/	0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38,
/*lk*/	0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00,
/*ll*/	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x00,
/*lm*/	0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xC6, 0x00,
/*ln*/	0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00,
/*lo*/	0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
/*lp*/	0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60,
/*lq*/	0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06,
/*lr*/	0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00,
/*ls*/	0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00,
/*lt*/	0x30, 0x30, 0x7C, 0x30, 0x30, 0x36, 0x1C, 0x00,
/*lu*/	0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
/*lv*/	0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00,
/*lw*/	0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xEE, 0x44, 0x00,
/*lx*/	0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00,
/*ly*/	0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x3C,
/*lz*/	0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00,
		0x1C, 0x30, 0x30, 0x60, 0x30, 0x30, 0x1C, 0x00,
		0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
		0x38, 0x0C, 0x0C, 0x06, 0x0C, 0x0C, 0x38, 0x00,
		0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x18, 0x3C, 0x66, 0x66, 0x7E, 0x00,
		0x3F, 0x61, 0x63, 0xF8, 0x60, 0xF9, 0x61, 0x3F,
		0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
		0x0E, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
		0x3C, 0x66, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
		0x66, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
		0x70, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
		0x1C, 0x1C, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
		0x00, 0x00, 0x3E, 0x60, 0x60, 0x3E, 0x18, 0x30,
		0x3C, 0x66, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
		0x66, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
		0x70, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
		0x66, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
		0x3C, 0x66, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
		0x70, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
		0xC6, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
		0x1C, 0x1C, 0x00, 0x3C, 0x66, 0x7E, 0x66, 0x00,
		0x0C, 0x18, 0x7C, 0x60, 0x78, 0x60, 0x7C, 0x00,
		0x00, 0x00, 0x7E, 0x1A, 0x7E, 0xD8, 0x7E, 0x00,
		0x3E, 0x78, 0xD8, 0xDE, 0xF8, 0xD8, 0xDE, 0x00,
		0x3C, 0x66, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
		0x66, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
		0x70, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
		0x3C, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00,
		0x70, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
		0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x3C,
		0x66, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C,
		0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C,
		0x0C, 0x0C, 0x3E, 0x60, 0x60, 0x3E, 0x0C, 0x0C,
		0x38, 0x6C, 0x60, 0xF0, 0x60, 0x66, 0xFC, 0x00,
		0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x7E, 0x18,
		0x7C, 0x66, 0x66, 0x7C, 0x66, 0x6F, 0x66, 0x63,
		0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0x78, 0x30,
		0x0E, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
		0x0E, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
		0x0E, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
		0x0E, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
		0x3B, 0x6E, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x00,
		0x3B, 0x6E, 0x00, 0x66, 0x76, 0x7E, 0x6E, 0x66,
		0x3E, 0x66, 0x66, 0x3E, 0x00, 0x7E, 0x00, 0x00,
		0x3C, 0x66, 0x66, 0x3C, 0x00, 0x7E, 0x00, 0x00,
		0x18, 0x00, 0x18, 0x30, 0x60, 0x66, 0x3C, 0x00,
		0x00, 0x00, 0x00, 0x7E, 0x60, 0x60, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x7E, 0x06, 0x06, 0x00, 0x00,
		0xC6, 0xCC, 0xD8, 0x3E, 0x63, 0xC6, 0x0C, 0x1F,
		0xC6, 0xCC, 0xD8, 0x36, 0x6E, 0xD6, 0x1F, 0x06,
		0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
		0x00, 0x36, 0x6C, 0xD8, 0x6C, 0x36, 0x00, 0x00,
		0x00, 0xD8, 0x6C, 0x36, 0x6C, 0xD8, 0x00, 0x00,
		0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
		0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
		0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77,
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0xF8, 0xF8, 0x08, 0x08, 0x08,
		0x1C, 0x1C, 0x1C, 0x1C, 0xFC, 0x1C, 0x1C, 0x1C,
		0x00, 0x00, 0x00, 0x00, 0xFC, 0x1C, 0x1C, 0x1C,
		0x00, 0x00, 0x00, 0xF8, 0xF8, 0x08, 0x08, 0x08,
		0x1C, 0x1C, 0x1C, 0xFC, 0xFC, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C,
		0x00, 0x00, 0x00, 0xFC, 0xFC, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1C, 0xFC, 0xFC, 0x00, 0x00, 0x00,
		0x1C, 0x1C, 0x1C, 0x1C, 0xFC, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0xF8, 0xF8, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xF8, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0x08, 0x0F, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x08, 0xFF, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0x0F, 0x0F, 0x08, 0x08, 0x08,
		0x1C, 0x1C, 0x1C, 0x1C, 0x1F, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1C, 0x1F, 0x1F, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1C, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xFF, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1C, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C,
		0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x1C, 0x1C, 0x1C, 0xFF, 0xFF, 0x1C, 0x1C, 0x1C,
		0x08, 0x08, 0x08, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x1C, 0x1C, 0x1C, 0x1C, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xFF, 0x08, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1C, 0x1C, 0x1F, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x08, 0x0F, 0x0F, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0F, 0x0F, 0x08, 0x08, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x1F, 0x1C, 0x1C, 0x1C,
		0x1C, 0x1C, 0x1C, 0x1C, 0xFF, 0x1C, 0x1C, 0x1C,
		0x08, 0x08, 0x08, 0xFF, 0xFF, 0x08, 0x08, 0x08,
		0x08, 0x08, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x08, 0x08,
		0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
		0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
		0x3C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x60,
		0x7E, 0x66, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00,
		0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x66, 0x00,
		0x7E, 0x66, 0x30, 0x18, 0x30, 0x66, 0x7E, 0x00,
		0x00, 0x00, 0x3E, 0x6C, 0x6C, 0x6C, 0x38, 0x00,
		0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7F, 0xC0,
		0x00, 0x00, 0x7E, 0xD8, 0x18, 0x18, 0x0C, 0x00,
		0x7C, 0x38, 0x7C, 0xD6, 0xD6, 0x7C, 0x38, 0x7C,
		0x7C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x7C, 0x00,
		0x7C, 0xC6, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00,
		0x1E, 0x30, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x00,
		0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00,
		0x03, 0x06, 0x3E, 0x6B, 0x73, 0x3E, 0x60, 0xC0,
		0x1E, 0x30, 0x60, 0x7E, 0x60, 0x30, 0x1E, 0x00,
		0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00,
		0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00,
		0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00,
		0x30, 0x18, 0x0C, 0x18, 0x30, 0x00, 0x7E, 0x00,
		0x0C, 0x18, 0x30, 0x18, 0x0C, 0x00, 0x7E, 0x00,
		0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18,
		0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70,
		0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00,
		0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00,
		0x3C, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
		0x1E, 0x18, 0x18, 0x18, 0x18, 0xD8, 0x78, 0x38,
		0x78, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00,
		0x38, 0x0C, 0x18, 0x30, 0x3C, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00
	};

ALIGN(4)
PRIVATE ARGB* svga_framebuffer = 0;

ALIGN(4)
PRIVATE SIZE svga_screen_size = {0, 0};

//==================================CODE======================================//
#pragma code_seg(".code")
//============================================================================//
/**
* @brief SVGA Initialization.
* @return Returns true if svga is enabled.
*/
PUBLIC bool SVGA_Init(IN SVGA_LOADER_DATA* _loader_data)
{
	svga_screen_size.width	= _loader_data->x_resolution;
	svga_screen_size.height	= _loader_data->y_resolution;
	svga_framebuffer		= (ARGB*)_loader_data->framebuffer;
	
	return SVGA_IsGraphicModeEnabled();
}

/**
* @brief Calculates de address of a given coordinate.
* @param _x [in] X coordinate.
* @param _y [in] Y coordinate.
* @return Returns the address of the ARGB element for _x and _y.
*/
PRIVATE ARGB* SVGA_GetDirection(IN dword _x, IN dword _y)
{
	//Should do a check...
	return &svga_framebuffer[((svga_screen_size.height - 1 - _y) * svga_screen_size.width + _x)];
}

/**
* @brief Get the color value in the screen for a coordinate.
* @param _x [in] X coordinate.
* @param _y [in] Y coordinate.
* @return Returns the color of the pixel.
*/
PUBLIC ARGB SVGA_GetPixel(IN dword _x, IN dword _y)
{
	return *SVGA_GetDirection(_x, _y);
}

/**
* @brief Set the color value in the screen for a coordinate.
* If the color is a transparent one, the color is mixed to get a solid one that makes the transparency.
* @param _x [in] X coordinate.
* @param _y [in] Y coordinate.
* @param _color [in] Color to fill the pixel.
*/
PUBLIC void SVGA_SetPixel(IN dword _x, IN dword _y, IN ARGB _color)
{
	ARGB* direction = SVGA_GetDirection(_x, _y);
	ARGB pixel = *direction;

	if(COLOR_IsTransparent(_color))
	{
		byte red	= (byte)((((_color&0x00FF0000)>>16)>>1) | (((pixel&0x00FF0000)>>16)>>1));
		byte green	= (byte)((((_color&0x0000FF00)>>8)>>1)  | (((pixel&0x0000FF00)>>8)>>1));
		byte blue	= (byte)((((_color&0x000000FF))>>1)     | (((pixel&0x000000FF))>>1));

		pixel = (red<<16) | (green<<8) | blue;
	}
	else
		pixel = _color;

	//Pixel = Color
	*direction = pixel;
}

/**
* @brief Fills the screen with color given.
* @param _color [in] Color to fill the screen with.
*/
PUBLIC void SVGA_ClearScreen(IN ARGB _color)
{
	for(dword i = 0; i < svga_screen_size.height * svga_screen_size.width; i++)
	{
		svga_framebuffer[i] = _color;
	}
}

/**
* @brief Prints one character in the screen.
* @param _x [in] X coordinate.
* @param _y [in] Y coordinate.
* @param _color [in] Color to use in character.
* @param _character [in] Character to print.
*/
PUBLIC void SVGA_PrintCharacter(IN dword _x, IN dword _y, IN ARGB _color, IN byte _character)
{
	byte* bitmap = svga_font + _character*8;

	for(byte i = 0; i < 8; i++)
	{
		for(byte j = 0; j < 8; j++)
		{
			if( bitmap[i] & (1<<j) )
			{
				SVGA_SetPixel(_x + (8 - j) - 1, _y - i, _color);
			}
		}
	}
}

/**
* @brief Prints one string in the screen.
* @param _x [in] X coordinate.
* @param _y [in] Y coordinate.
* @param _color [in] Color to use in character.
* @param _text [in] String to print.
*/
PUBLIC void SVGA_PrintText(IN dword _x, IN dword _y, IN ARGB _color, IN string* _text)
{
	for(byte i = 0; i < _text->size; i++)
	{
		SVGA_PrintCharacter(_x + i * 8, _y, _color, _text->text[i]);
	}	
}

/**
* @brief Indicates if graphic mode has started.
* @return True if we are in graphic mode, false otherwise.
*/
PUBLIC bool SVGA_IsGraphicModeEnabled()
{
	return svga_framebuffer != 0;
}

/**
* @brief To get the width of the valid screen.
* @return The width of the screen for the framebuffer.
*/
PUBLIC dword SVGA_GetWidth()
{
	return svga_screen_size.width;
}

/**
* @brief To get the height of the valid screen.
* @return The height of the screen for the framebuffer.
*/
PUBLIC dword SVGA_GetHeight()
{
	return svga_screen_size.height;
}
